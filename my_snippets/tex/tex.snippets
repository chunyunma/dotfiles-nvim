global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

def create_matrix(snip):
    matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

    rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
    cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

    int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

    rows = int_val(rows)
    cols = int_val(cols)

    offset = cols + 1
    old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

    snip.buffer[snip.line] = ''

    final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

    for i in range(rows):
        final_str += old_spacing + '\t'
        final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

        final_str += " \\\\\\\n"

    final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

    snip.expand_anon(final_str)

def add_row(snip):
    row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
    old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

    snip.buffer[snip.line] = ''

    final_str = old_spacing
    final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
    final_str += " \\\\\\"

    snip.expand_anon(final_str)

# <https://vi.stackexchange.com/a/17461/32247>

endglobal

snippet template "Basic template" b
\documentclass[a4paper,12pt]{article}

\usepackage{amsmath, amssymb}

\title{${1:Insert a title}}
\author{Chunyun Ma}
\date{${2:`date +%Y-%m-%d`}}

\begin{document}
\maketitle

$0

\end{document}
endsnippet

# environment
snippet beg "begin{} / end{}" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

# quick matrix
pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet


# inline math
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# display math
snippet dm "Math" wA
\[
$1
\] $0
endsnippet

# super- and sub-script
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

# postfix
priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# fraction
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# norm
context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

# ...
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

# not equal
snippet != "equals" iA
\neq 
endsnippet

# determinant
snippet det "det()" i
\operatorname{det}(\mathbf{$1})$0
endsnippet


# math font
snippet mb "\mathbf{}" i
\mathbf{$1}$0
endsnippet

